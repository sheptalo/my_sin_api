import warnings

from requests import get, post, delete as delet

from my_sin_api._base import BaseClass


class Tegtory(BaseClass):
    __params = []

    def __new__(cls, user_id, api_key, api_url):
        if not cls.__params:
            cls.__params = get(api_url + 'params').json()
        self = super().__new__(cls)
        return self


class Player(Tegtory):
    def __init__(self, user_id, api_key, api_url):
        try:
            int(user_id)
        except:
            user_id = get(f'{api_url}findUser/{user_id.replace('@', '')}',
                          headers={"Authorization": f"Bearer {api_key}"}).text
        super().__init__(user_id, api_key, api_url)

    def __str__(self):
        user_data = self.get(
            'name,money,stolar,rating,league,clan_name,id,titles')
        _text = f"""
üåü*{user_data[0]}*üåü

üí≤ *–ë–∞–ª–∞–Ω—Å:* {user_data[1]:,}
‚öîÔ∏è *–°—Ç–æ–ª–∞—Ä:* {user_data[2]:,}

üèÜ *–†–µ–π—Ç–∏–Ω–≥:* {user_data[3]:,}
üõ°Ô∏è *–õ–∏–≥–∞:* {user_data[4]}

üåé *O–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ:* {user_data[5].replace('_', ' ')}

*–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä*: {user_data[6]}
                """
        title = user_data[7]
        if title:
            _text += f'\n\nüèÜ *–¢–∏—Ç—É–ª—ã:* \n'
            for name in title.split():
                _text += f"- {name.replace('_', ' ')}\n"
        return _text

    async def create(self, username: str, user: str):
        post(self.post_url, headers=self.headers,
             json={"telegram_id": self.uid, 'username': username,
                   'user': user})

    @property
    def exist(self) -> bool:
        try:
            return self.telegram_id == int(self.uid)
        except:
            pass
        return False

    @property
    def is_banned(self) -> bool:
        return False


class Factory(Tegtory):

    def __str__(self):
        factory_data = self.get(
            'name,lvl,state,tax,workers,ecology,stock,verification')
        return f"""
üè≠ *{factory_data[0].replace('_', ' ')}*
üîß *–£—Ä–æ–≤–µ–Ω—å:* {factory_data[1]}
‚öôÔ∏è *–¢–∏–ø:* {self.type}
üöß *–°—Ç–∞—Ç—É—Å:* {'–†–∞–±–æ—Ç–∞–µ—Ç' if factory_data[2] == 1 else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
üí∏ *–ù–∞–ª–æ–≥–∏:* {factory_data[3]}
üë∑‚Äç *–†–∞–±–æ—Ç–Ω–∏–∫–∏:* {factory_data[4]}
‚ôªÔ∏è *–í–∫–ª–∞–¥ –≤ —ç–∫–æ–ª–æ–≥–∏—é:* {factory_data[5]}
üì¶ *–¢–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:* {factory_data[6]}
{'üîé _–ó–Ω–∞–∫ –∫–∞—á–µ—Å—Ç–≤–∞_' if factory_data[7] == 1 else ''}
"""

    @property
    def type(self):
        lvl = self.lvl
        if lvl >= 1000:
            return '–ó–≤–µ–∑–¥–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è'
        elif lvl >= 500:
            return '–ê—Ç–æ–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è'
        elif lvl >= 100:
            return '–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è'
        elif lvl >= 50:
            return '–•–∏–º–∏–∫–∞—Ç—ã'
        elif lvl >= 10:
            return '–ñ–µ–ª–µ–∑–æ'
        else:
            return '–î—Ä–µ–≤–µ—Å–∏–Ω–∞'

    @property
    def exist(self) -> bool:
        try:
            req = get(self.get_url + 'owner_id', headers=self.headers)
            return req.status_code != 404
        except:
            pass
        return False

    def create(self, name: str):
        post(self.post_url, headers=self.headers,
             json={'owner_id': self.uid, 'name': name})

    def delete(self):
        delet(self.post_url, headers=self.headers,
              params={'owner_id': self.owner_id})

    def exists(self) -> bool:
        warnings.warn(
            'This are going to be deleted, and replaced with .exist',
            PendingDeprecationWarning, stacklevel=2)
        return self.exist


class Mine(BaseClass):

    def __str__(self):
        data = self.get('name,lvl,tax')
        return f"""
–®–∞—Ö—Ç–∞ *{data[0]}*

*–†–∞–∑–º–µ—Ä:* {data[1]}
*–ù–∞–ª–æ–≥–∏:* {data[2]:,}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    def create(self, name: str):
        post(self.post_url, headers=self.headers,
             json={"owner_id": self.uid, 'name': name})

    @property
    def exist(self):
        try:
            return self.owner_id == int(self.uid)
        except:
            pass
        return False


class Tunnel(BaseClass):

    def __str__(self):
        mine_id, tunnel_id, lvl, workers, eq, work = self.get(
            'mine_id,id,lvl,workers,equipment,working')
        return f"""
–¢—É–Ω–Ω–µ–ª—å ‚Ññ {f'{(mine_id - 100000) * tunnel_id:,}'.replace(',', '-')}
_–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä {tunnel_id:,}_

–†–∞–±–æ—Ç–∞: {'–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if work == 0 else '–ò–¥–µ—Ç –ø–æ–ª–Ω—ã–º —Ö–æ–¥–æ–º'}

–ì–ª—É–±–∏–Ω–∞: {lvl} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤.
–†–∞–±–æ—á–∏–µ: {workers} —á–µ–ª–æ–≤–µ–∫.
"""
